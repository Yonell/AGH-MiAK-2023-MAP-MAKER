Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> start
Rule 1     start -> instruction_iterator EOF
Rule 2     instruction_iterator -> instruction_iterator instruction NEWLINE
Rule 3     instruction_iterator -> empty
Rule 4     instruction -> CREATE_KEYWORD type VARNAME_ARGNAME construction_arguments
Rule 5     instruction -> PLACE_KEYWORD type construction_arguments ON_KEYWORD VARNAME_ARGNAME coordinates
Rule 6     instruction -> PLACE_KEYWORD type VARNAME_ARGNAME construction_arguments ON_KEYWORD VARNAME_ARGNAME coordinates
Rule 7     instruction -> PLACE_KEYWORD VARNAME_ARGNAME ON_KEYWORD VARNAME_ARGNAME coordinates
Rule 8     instruction -> RENDER_KEYWORD VARNAME_ARGNAME optional_render_string optional_coordinates
Rule 9     optional_render_string -> AS_KEYWORD STRING
Rule 10    optional_render_string -> empty
Rule 11    optional_coordinates -> coordinates
Rule 12    optional_coordinates -> empty
Rule 13    type -> MAP_KEYWORD
Rule 14    type -> TERRAIN_KEYWORD
Rule 15    type -> CITY_KEYWORD
Rule 16    type -> ROAD_KEYWORD
Rule 17    type -> RIVER_KEYWORD
Rule 18    construction_arguments -> LPAREN argument_iterator RPAREN
Rule 19    argument_iterator -> argument
Rule 20    argument_iterator -> argument_iterator COMMA argument
Rule 21    argument_iterator -> empty
Rule 22    argument -> VARNAME_ARGNAME COLON value
Rule 23    value -> NUMBER
Rule 24    value -> STRING
Rule 25    value -> list
Rule 26    value -> coordinates
Rule 27    value -> VARNAME_ARGNAME
Rule 28    list -> LSQUAREPAREN list_item_iterator RSQUAREPAREN
Rule 29    list_item_iterator -> value
Rule 30    list_item_iterator -> list_item_iterator COMMA value
Rule 31    list_item_iterator -> empty
Rule 32    coordinates -> LPAREN NUMBER COMMA NUMBER RPAREN
Rule 33    empty -> <empty>

Terminals, with rules where they appear

AS_KEYWORD           : 9
CITY_KEYWORD         : 15
COLON                : 22
COMMA                : 20 30 32
CREATE_KEYWORD       : 4
EOF                  : 1
LPAREN               : 18 32
LSQUAREPAREN         : 28
MAP_KEYWORD          : 13
NEWLINE              : 2
NUMBER               : 23 32 32
ON_KEYWORD           : 5 6 7
PLACE_KEYWORD        : 5 6 7
RENDER_KEYWORD       : 8
RIVER_KEYWORD        : 17
ROAD_KEYWORD         : 16
RPAREN               : 18 32
RSQUAREPAREN         : 28
STRING               : 9 24
TERRAIN_KEYWORD      : 14
VARNAME_ARGNAME      : 4 5 6 6 7 7 8 22 27
error                : 

Nonterminals, with rules where they appear

argument             : 19 20
argument_iterator    : 18 20
construction_arguments : 4 5 6
coordinates          : 5 6 7 11 26
empty                : 3 10 12 21 31
instruction          : 2
instruction_iterator : 1 2
list                 : 25
list_item_iterator   : 28 30
optional_coordinates : 8
optional_render_string : 8
start                : 0
type                 : 4 5 6
value                : 22 29 30

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . instruction_iterator EOF
    (2) instruction_iterator -> . instruction_iterator instruction NEWLINE
    (3) instruction_iterator -> . empty
    (33) empty -> .

    EOF             reduce using rule 33 (empty -> .)
    CREATE_KEYWORD  reduce using rule 33 (empty -> .)
    PLACE_KEYWORD   reduce using rule 33 (empty -> .)
    RENDER_KEYWORD  reduce using rule 33 (empty -> .)

    start                          shift and go to state 1
    instruction_iterator           shift and go to state 2
    empty                          shift and go to state 3

state 1

    (0) S' -> start .



state 2

    (1) start -> instruction_iterator . EOF
    (2) instruction_iterator -> instruction_iterator . instruction NEWLINE
    (4) instruction -> . CREATE_KEYWORD type VARNAME_ARGNAME construction_arguments
    (5) instruction -> . PLACE_KEYWORD type construction_arguments ON_KEYWORD VARNAME_ARGNAME coordinates
    (6) instruction -> . PLACE_KEYWORD type VARNAME_ARGNAME construction_arguments ON_KEYWORD VARNAME_ARGNAME coordinates
    (7) instruction -> . PLACE_KEYWORD VARNAME_ARGNAME ON_KEYWORD VARNAME_ARGNAME coordinates
    (8) instruction -> . RENDER_KEYWORD VARNAME_ARGNAME optional_render_string optional_coordinates

    EOF             shift and go to state 4
    CREATE_KEYWORD  shift and go to state 6
    PLACE_KEYWORD   shift and go to state 7
    RENDER_KEYWORD  shift and go to state 8

    instruction                    shift and go to state 5

state 3

    (3) instruction_iterator -> empty .

    EOF             reduce using rule 3 (instruction_iterator -> empty .)
    CREATE_KEYWORD  reduce using rule 3 (instruction_iterator -> empty .)
    PLACE_KEYWORD   reduce using rule 3 (instruction_iterator -> empty .)
    RENDER_KEYWORD  reduce using rule 3 (instruction_iterator -> empty .)


state 4

    (1) start -> instruction_iterator EOF .

    $end            reduce using rule 1 (start -> instruction_iterator EOF .)


state 5

    (2) instruction_iterator -> instruction_iterator instruction . NEWLINE

    NEWLINE         shift and go to state 9


state 6

    (4) instruction -> CREATE_KEYWORD . type VARNAME_ARGNAME construction_arguments
    (13) type -> . MAP_KEYWORD
    (14) type -> . TERRAIN_KEYWORD
    (15) type -> . CITY_KEYWORD
    (16) type -> . ROAD_KEYWORD
    (17) type -> . RIVER_KEYWORD

    MAP_KEYWORD     shift and go to state 11
    TERRAIN_KEYWORD shift and go to state 12
    CITY_KEYWORD    shift and go to state 13
    ROAD_KEYWORD    shift and go to state 14
    RIVER_KEYWORD   shift and go to state 15

    type                           shift and go to state 10

state 7

    (5) instruction -> PLACE_KEYWORD . type construction_arguments ON_KEYWORD VARNAME_ARGNAME coordinates
    (6) instruction -> PLACE_KEYWORD . type VARNAME_ARGNAME construction_arguments ON_KEYWORD VARNAME_ARGNAME coordinates
    (7) instruction -> PLACE_KEYWORD . VARNAME_ARGNAME ON_KEYWORD VARNAME_ARGNAME coordinates
    (13) type -> . MAP_KEYWORD
    (14) type -> . TERRAIN_KEYWORD
    (15) type -> . CITY_KEYWORD
    (16) type -> . ROAD_KEYWORD
    (17) type -> . RIVER_KEYWORD

    VARNAME_ARGNAME shift and go to state 17
    MAP_KEYWORD     shift and go to state 11
    TERRAIN_KEYWORD shift and go to state 12
    CITY_KEYWORD    shift and go to state 13
    ROAD_KEYWORD    shift and go to state 14
    RIVER_KEYWORD   shift and go to state 15

    type                           shift and go to state 16

state 8

    (8) instruction -> RENDER_KEYWORD . VARNAME_ARGNAME optional_render_string optional_coordinates

    VARNAME_ARGNAME shift and go to state 18


state 9

    (2) instruction_iterator -> instruction_iterator instruction NEWLINE .

    EOF             reduce using rule 2 (instruction_iterator -> instruction_iterator instruction NEWLINE .)
    CREATE_KEYWORD  reduce using rule 2 (instruction_iterator -> instruction_iterator instruction NEWLINE .)
    PLACE_KEYWORD   reduce using rule 2 (instruction_iterator -> instruction_iterator instruction NEWLINE .)
    RENDER_KEYWORD  reduce using rule 2 (instruction_iterator -> instruction_iterator instruction NEWLINE .)


state 10

    (4) instruction -> CREATE_KEYWORD type . VARNAME_ARGNAME construction_arguments

    VARNAME_ARGNAME shift and go to state 19


state 11

    (13) type -> MAP_KEYWORD .

    VARNAME_ARGNAME reduce using rule 13 (type -> MAP_KEYWORD .)
    LPAREN          reduce using rule 13 (type -> MAP_KEYWORD .)


state 12

    (14) type -> TERRAIN_KEYWORD .

    VARNAME_ARGNAME reduce using rule 14 (type -> TERRAIN_KEYWORD .)
    LPAREN          reduce using rule 14 (type -> TERRAIN_KEYWORD .)


state 13

    (15) type -> CITY_KEYWORD .

    VARNAME_ARGNAME reduce using rule 15 (type -> CITY_KEYWORD .)
    LPAREN          reduce using rule 15 (type -> CITY_KEYWORD .)


state 14

    (16) type -> ROAD_KEYWORD .

    VARNAME_ARGNAME reduce using rule 16 (type -> ROAD_KEYWORD .)
    LPAREN          reduce using rule 16 (type -> ROAD_KEYWORD .)


state 15

    (17) type -> RIVER_KEYWORD .

    VARNAME_ARGNAME reduce using rule 17 (type -> RIVER_KEYWORD .)
    LPAREN          reduce using rule 17 (type -> RIVER_KEYWORD .)


state 16

    (5) instruction -> PLACE_KEYWORD type . construction_arguments ON_KEYWORD VARNAME_ARGNAME coordinates
    (6) instruction -> PLACE_KEYWORD type . VARNAME_ARGNAME construction_arguments ON_KEYWORD VARNAME_ARGNAME coordinates
    (18) construction_arguments -> . LPAREN argument_iterator RPAREN

    VARNAME_ARGNAME shift and go to state 21
    LPAREN          shift and go to state 22

    construction_arguments         shift and go to state 20

state 17

    (7) instruction -> PLACE_KEYWORD VARNAME_ARGNAME . ON_KEYWORD VARNAME_ARGNAME coordinates

    ON_KEYWORD      shift and go to state 23


state 18

    (8) instruction -> RENDER_KEYWORD VARNAME_ARGNAME . optional_render_string optional_coordinates
    (9) optional_render_string -> . AS_KEYWORD STRING
    (10) optional_render_string -> . empty
    (33) empty -> .

    AS_KEYWORD      shift and go to state 25
    LPAREN          reduce using rule 33 (empty -> .)
    NEWLINE         reduce using rule 33 (empty -> .)

    optional_render_string         shift and go to state 24
    empty                          shift and go to state 26

state 19

    (4) instruction -> CREATE_KEYWORD type VARNAME_ARGNAME . construction_arguments
    (18) construction_arguments -> . LPAREN argument_iterator RPAREN

    LPAREN          shift and go to state 22

    construction_arguments         shift and go to state 27

state 20

    (5) instruction -> PLACE_KEYWORD type construction_arguments . ON_KEYWORD VARNAME_ARGNAME coordinates

    ON_KEYWORD      shift and go to state 28


state 21

    (6) instruction -> PLACE_KEYWORD type VARNAME_ARGNAME . construction_arguments ON_KEYWORD VARNAME_ARGNAME coordinates
    (18) construction_arguments -> . LPAREN argument_iterator RPAREN

    LPAREN          shift and go to state 22

    construction_arguments         shift and go to state 29

state 22

    (18) construction_arguments -> LPAREN . argument_iterator RPAREN
    (19) argument_iterator -> . argument
    (20) argument_iterator -> . argument_iterator COMMA argument
    (21) argument_iterator -> . empty
    (22) argument -> . VARNAME_ARGNAME COLON value
    (33) empty -> .

    VARNAME_ARGNAME shift and go to state 33
    RPAREN          reduce using rule 33 (empty -> .)
    COMMA           reduce using rule 33 (empty -> .)

    argument_iterator              shift and go to state 30
    argument                       shift and go to state 31
    empty                          shift and go to state 32

state 23

    (7) instruction -> PLACE_KEYWORD VARNAME_ARGNAME ON_KEYWORD . VARNAME_ARGNAME coordinates

    VARNAME_ARGNAME shift and go to state 34


state 24

    (8) instruction -> RENDER_KEYWORD VARNAME_ARGNAME optional_render_string . optional_coordinates
    (11) optional_coordinates -> . coordinates
    (12) optional_coordinates -> . empty
    (32) coordinates -> . LPAREN NUMBER COMMA NUMBER RPAREN
    (33) empty -> .

    LPAREN          shift and go to state 38
    NEWLINE         reduce using rule 33 (empty -> .)

    optional_coordinates           shift and go to state 35
    coordinates                    shift and go to state 36
    empty                          shift and go to state 37

state 25

    (9) optional_render_string -> AS_KEYWORD . STRING

    STRING          shift and go to state 39


state 26

    (10) optional_render_string -> empty .

    LPAREN          reduce using rule 10 (optional_render_string -> empty .)
    NEWLINE         reduce using rule 10 (optional_render_string -> empty .)


state 27

    (4) instruction -> CREATE_KEYWORD type VARNAME_ARGNAME construction_arguments .

    NEWLINE         reduce using rule 4 (instruction -> CREATE_KEYWORD type VARNAME_ARGNAME construction_arguments .)


state 28

    (5) instruction -> PLACE_KEYWORD type construction_arguments ON_KEYWORD . VARNAME_ARGNAME coordinates

    VARNAME_ARGNAME shift and go to state 40


state 29

    (6) instruction -> PLACE_KEYWORD type VARNAME_ARGNAME construction_arguments . ON_KEYWORD VARNAME_ARGNAME coordinates

    ON_KEYWORD      shift and go to state 41


state 30

    (18) construction_arguments -> LPAREN argument_iterator . RPAREN
    (20) argument_iterator -> argument_iterator . COMMA argument

    RPAREN          shift and go to state 42
    COMMA           shift and go to state 43


state 31

    (19) argument_iterator -> argument .

    RPAREN          reduce using rule 19 (argument_iterator -> argument .)
    COMMA           reduce using rule 19 (argument_iterator -> argument .)


state 32

    (21) argument_iterator -> empty .

    RPAREN          reduce using rule 21 (argument_iterator -> empty .)
    COMMA           reduce using rule 21 (argument_iterator -> empty .)


state 33

    (22) argument -> VARNAME_ARGNAME . COLON value

    COLON           shift and go to state 44


state 34

    (7) instruction -> PLACE_KEYWORD VARNAME_ARGNAME ON_KEYWORD VARNAME_ARGNAME . coordinates
    (32) coordinates -> . LPAREN NUMBER COMMA NUMBER RPAREN

    LPAREN          shift and go to state 38

    coordinates                    shift and go to state 45

state 35

    (8) instruction -> RENDER_KEYWORD VARNAME_ARGNAME optional_render_string optional_coordinates .

    NEWLINE         reduce using rule 8 (instruction -> RENDER_KEYWORD VARNAME_ARGNAME optional_render_string optional_coordinates .)


state 36

    (11) optional_coordinates -> coordinates .

    NEWLINE         reduce using rule 11 (optional_coordinates -> coordinates .)


state 37

    (12) optional_coordinates -> empty .

    NEWLINE         reduce using rule 12 (optional_coordinates -> empty .)


state 38

    (32) coordinates -> LPAREN . NUMBER COMMA NUMBER RPAREN

    NUMBER          shift and go to state 46


state 39

    (9) optional_render_string -> AS_KEYWORD STRING .

    LPAREN          reduce using rule 9 (optional_render_string -> AS_KEYWORD STRING .)
    NEWLINE         reduce using rule 9 (optional_render_string -> AS_KEYWORD STRING .)


state 40

    (5) instruction -> PLACE_KEYWORD type construction_arguments ON_KEYWORD VARNAME_ARGNAME . coordinates
    (32) coordinates -> . LPAREN NUMBER COMMA NUMBER RPAREN

    LPAREN          shift and go to state 38

    coordinates                    shift and go to state 47

state 41

    (6) instruction -> PLACE_KEYWORD type VARNAME_ARGNAME construction_arguments ON_KEYWORD . VARNAME_ARGNAME coordinates

    VARNAME_ARGNAME shift and go to state 48


state 42

    (18) construction_arguments -> LPAREN argument_iterator RPAREN .

    ON_KEYWORD      reduce using rule 18 (construction_arguments -> LPAREN argument_iterator RPAREN .)
    NEWLINE         reduce using rule 18 (construction_arguments -> LPAREN argument_iterator RPAREN .)


state 43

    (20) argument_iterator -> argument_iterator COMMA . argument
    (22) argument -> . VARNAME_ARGNAME COLON value

    VARNAME_ARGNAME shift and go to state 33

    argument                       shift and go to state 49

state 44

    (22) argument -> VARNAME_ARGNAME COLON . value
    (23) value -> . NUMBER
    (24) value -> . STRING
    (25) value -> . list
    (26) value -> . coordinates
    (27) value -> . VARNAME_ARGNAME
    (28) list -> . LSQUAREPAREN list_item_iterator RSQUAREPAREN
    (32) coordinates -> . LPAREN NUMBER COMMA NUMBER RPAREN

    NUMBER          shift and go to state 52
    STRING          shift and go to state 53
    VARNAME_ARGNAME shift and go to state 50
    LSQUAREPAREN    shift and go to state 56
    LPAREN          shift and go to state 38

    value                          shift and go to state 51
    list                           shift and go to state 54
    coordinates                    shift and go to state 55

state 45

    (7) instruction -> PLACE_KEYWORD VARNAME_ARGNAME ON_KEYWORD VARNAME_ARGNAME coordinates .

    NEWLINE         reduce using rule 7 (instruction -> PLACE_KEYWORD VARNAME_ARGNAME ON_KEYWORD VARNAME_ARGNAME coordinates .)


state 46

    (32) coordinates -> LPAREN NUMBER . COMMA NUMBER RPAREN

    COMMA           shift and go to state 57


state 47

    (5) instruction -> PLACE_KEYWORD type construction_arguments ON_KEYWORD VARNAME_ARGNAME coordinates .

    NEWLINE         reduce using rule 5 (instruction -> PLACE_KEYWORD type construction_arguments ON_KEYWORD VARNAME_ARGNAME coordinates .)


state 48

    (6) instruction -> PLACE_KEYWORD type VARNAME_ARGNAME construction_arguments ON_KEYWORD VARNAME_ARGNAME . coordinates
    (32) coordinates -> . LPAREN NUMBER COMMA NUMBER RPAREN

    LPAREN          shift and go to state 38

    coordinates                    shift and go to state 58

state 49

    (20) argument_iterator -> argument_iterator COMMA argument .

    RPAREN          reduce using rule 20 (argument_iterator -> argument_iterator COMMA argument .)
    COMMA           reduce using rule 20 (argument_iterator -> argument_iterator COMMA argument .)


state 50

    (27) value -> VARNAME_ARGNAME .

    RPAREN          reduce using rule 27 (value -> VARNAME_ARGNAME .)
    COMMA           reduce using rule 27 (value -> VARNAME_ARGNAME .)
    RSQUAREPAREN    reduce using rule 27 (value -> VARNAME_ARGNAME .)


state 51

    (22) argument -> VARNAME_ARGNAME COLON value .

    RPAREN          reduce using rule 22 (argument -> VARNAME_ARGNAME COLON value .)
    COMMA           reduce using rule 22 (argument -> VARNAME_ARGNAME COLON value .)


state 52

    (23) value -> NUMBER .

    RPAREN          reduce using rule 23 (value -> NUMBER .)
    COMMA           reduce using rule 23 (value -> NUMBER .)
    RSQUAREPAREN    reduce using rule 23 (value -> NUMBER .)


state 53

    (24) value -> STRING .

    RPAREN          reduce using rule 24 (value -> STRING .)
    COMMA           reduce using rule 24 (value -> STRING .)
    RSQUAREPAREN    reduce using rule 24 (value -> STRING .)


state 54

    (25) value -> list .

    RPAREN          reduce using rule 25 (value -> list .)
    COMMA           reduce using rule 25 (value -> list .)
    RSQUAREPAREN    reduce using rule 25 (value -> list .)


state 55

    (26) value -> coordinates .

    RPAREN          reduce using rule 26 (value -> coordinates .)
    COMMA           reduce using rule 26 (value -> coordinates .)
    RSQUAREPAREN    reduce using rule 26 (value -> coordinates .)


state 56

    (28) list -> LSQUAREPAREN . list_item_iterator RSQUAREPAREN
    (29) list_item_iterator -> . value
    (30) list_item_iterator -> . list_item_iterator COMMA value
    (31) list_item_iterator -> . empty
    (23) value -> . NUMBER
    (24) value -> . STRING
    (25) value -> . list
    (26) value -> . coordinates
    (27) value -> . VARNAME_ARGNAME
    (33) empty -> .
    (28) list -> . LSQUAREPAREN list_item_iterator RSQUAREPAREN
    (32) coordinates -> . LPAREN NUMBER COMMA NUMBER RPAREN

    NUMBER          shift and go to state 52
    STRING          shift and go to state 53
    VARNAME_ARGNAME shift and go to state 50
    RSQUAREPAREN    reduce using rule 33 (empty -> .)
    COMMA           reduce using rule 33 (empty -> .)
    LSQUAREPAREN    shift and go to state 56
    LPAREN          shift and go to state 38

    list_item_iterator             shift and go to state 59
    value                          shift and go to state 60
    empty                          shift and go to state 61
    list                           shift and go to state 54
    coordinates                    shift and go to state 55

state 57

    (32) coordinates -> LPAREN NUMBER COMMA . NUMBER RPAREN

    NUMBER          shift and go to state 62


state 58

    (6) instruction -> PLACE_KEYWORD type VARNAME_ARGNAME construction_arguments ON_KEYWORD VARNAME_ARGNAME coordinates .

    NEWLINE         reduce using rule 6 (instruction -> PLACE_KEYWORD type VARNAME_ARGNAME construction_arguments ON_KEYWORD VARNAME_ARGNAME coordinates .)


state 59

    (28) list -> LSQUAREPAREN list_item_iterator . RSQUAREPAREN
    (30) list_item_iterator -> list_item_iterator . COMMA value

    RSQUAREPAREN    shift and go to state 63
    COMMA           shift and go to state 64


state 60

    (29) list_item_iterator -> value .

    RSQUAREPAREN    reduce using rule 29 (list_item_iterator -> value .)
    COMMA           reduce using rule 29 (list_item_iterator -> value .)


state 61

    (31) list_item_iterator -> empty .

    RSQUAREPAREN    reduce using rule 31 (list_item_iterator -> empty .)
    COMMA           reduce using rule 31 (list_item_iterator -> empty .)


state 62

    (32) coordinates -> LPAREN NUMBER COMMA NUMBER . RPAREN

    RPAREN          shift and go to state 65


state 63

    (28) list -> LSQUAREPAREN list_item_iterator RSQUAREPAREN .

    RPAREN          reduce using rule 28 (list -> LSQUAREPAREN list_item_iterator RSQUAREPAREN .)
    COMMA           reduce using rule 28 (list -> LSQUAREPAREN list_item_iterator RSQUAREPAREN .)
    RSQUAREPAREN    reduce using rule 28 (list -> LSQUAREPAREN list_item_iterator RSQUAREPAREN .)


state 64

    (30) list_item_iterator -> list_item_iterator COMMA . value
    (23) value -> . NUMBER
    (24) value -> . STRING
    (25) value -> . list
    (26) value -> . coordinates
    (27) value -> . VARNAME_ARGNAME
    (28) list -> . LSQUAREPAREN list_item_iterator RSQUAREPAREN
    (32) coordinates -> . LPAREN NUMBER COMMA NUMBER RPAREN

    NUMBER          shift and go to state 52
    STRING          shift and go to state 53
    VARNAME_ARGNAME shift and go to state 50
    LSQUAREPAREN    shift and go to state 56
    LPAREN          shift and go to state 38

    value                          shift and go to state 66
    list                           shift and go to state 54
    coordinates                    shift and go to state 55

state 65

    (32) coordinates -> LPAREN NUMBER COMMA NUMBER RPAREN .

    NEWLINE         reduce using rule 32 (coordinates -> LPAREN NUMBER COMMA NUMBER RPAREN .)
    RPAREN          reduce using rule 32 (coordinates -> LPAREN NUMBER COMMA NUMBER RPAREN .)
    COMMA           reduce using rule 32 (coordinates -> LPAREN NUMBER COMMA NUMBER RPAREN .)
    RSQUAREPAREN    reduce using rule 32 (coordinates -> LPAREN NUMBER COMMA NUMBER RPAREN .)


state 66

    (30) list_item_iterator -> list_item_iterator COMMA value .

    RSQUAREPAREN    reduce using rule 30 (list_item_iterator -> list_item_iterator COMMA value .)
    COMMA           reduce using rule 30 (list_item_iterator -> list_item_iterator COMMA value .)

