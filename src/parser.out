Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> start
Rule 1     start -> instruction_iterator EOF
Rule 2     instruction_iterator -> instruction_iterator instruction NEWLINE
Rule 3     instruction_iterator -> empty
Rule 4     instruction -> CREATE_KEYWORD type VARNAME_ARGNAME construction_arguments
Rule 5     instruction -> PLACE_KEYWORD type construction_arguments ON_KEYWORD VARNAME_ARGNAME coordinates
Rule 6     instruction -> PLACE_KEYWORD type VARNAME_ARGNAME construction_arguments ON_KEYWORD VARNAME_ARGNAME coordinates
Rule 7     instruction -> PLACE_KEYWORD VARNAME_ARGNAME ON_KEYWORD VARNAME_ARGNAME coordinates
Rule 8     instruction -> RENDER_KEYWORD VARNAME_ARGNAME optional_render_string optional_coordinates
Rule 9     instruction -> FOR_KEYWORD VARNAME_ARGNAME coordinates NEWLINE instruction_iterator ENDFOR_KEYWORD
Rule 10    optional_render_string -> AS_KEYWORD STRING
Rule 11    optional_render_string -> empty
Rule 12    optional_coordinates -> coordinates
Rule 13    optional_coordinates -> empty
Rule 14    type -> MAP_KEYWORD
Rule 15    type -> TERRAIN_KEYWORD
Rule 16    type -> CITY_KEYWORD
Rule 17    type -> ROAD_KEYWORD
Rule 18    type -> RIVER_KEYWORD
Rule 19    construction_arguments -> LPAREN argument_iterator RPAREN
Rule 20    argument_iterator -> argument
Rule 21    argument_iterator -> argument_iterator COMMA argument
Rule 22    argument_iterator -> empty
Rule 23    argument -> VARNAME_ARGNAME COLON value
Rule 24    value -> NUMBER
Rule 25    value -> STRING
Rule 26    value -> list
Rule 27    value -> coordinates
Rule 28    value -> VARNAME_ARGNAME
Rule 29    list -> LSQUAREPAREN list_item_iterator RSQUAREPAREN
Rule 30    list_item_iterator -> value
Rule 31    list_item_iterator -> list_item_iterator COMMA value
Rule 32    list_item_iterator -> empty
Rule 33    coordinates -> LPAREN value COMMA value RPAREN
Rule 34    empty -> <empty>

Terminals, with rules where they appear

AS_KEYWORD           : 10
CITY_KEYWORD         : 16
COLON                : 23
COMMA                : 21 31 33
CREATE_KEYWORD       : 4
ENDFOR_KEYWORD       : 9
EOF                  : 1
FOR_KEYWORD          : 9
LPAREN               : 19 33
LSQUAREPAREN         : 29
MAP_KEYWORD          : 14
NEWLINE              : 2 9
NUMBER               : 24
ON_KEYWORD           : 5 6 7
PLACE_KEYWORD        : 5 6 7
RENDER_KEYWORD       : 8
RIVER_KEYWORD        : 18
ROAD_KEYWORD         : 17
RPAREN               : 19 33
RSQUAREPAREN         : 29
STRING               : 10 25
TERRAIN_KEYWORD      : 15
VARNAME_ARGNAME      : 4 5 6 6 7 7 8 9 23 28
error                : 

Nonterminals, with rules where they appear

argument             : 20 21
argument_iterator    : 19 21
construction_arguments : 4 5 6
coordinates          : 5 6 7 9 12 27
empty                : 3 11 13 22 32
instruction          : 2
instruction_iterator : 1 2 9
list                 : 26
list_item_iterator   : 29 31
optional_coordinates : 8
optional_render_string : 8
start                : 0
type                 : 4 5 6
value                : 23 30 31 33 33

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . instruction_iterator EOF
    (2) instruction_iterator -> . instruction_iterator instruction NEWLINE
    (3) instruction_iterator -> . empty
    (34) empty -> .

    EOF             reduce using rule 34 (empty -> .)
    CREATE_KEYWORD  reduce using rule 34 (empty -> .)
    PLACE_KEYWORD   reduce using rule 34 (empty -> .)
    RENDER_KEYWORD  reduce using rule 34 (empty -> .)
    FOR_KEYWORD     reduce using rule 34 (empty -> .)

    start                          shift and go to state 1
    instruction_iterator           shift and go to state 2
    empty                          shift and go to state 3

state 1

    (0) S' -> start .



state 2

    (1) start -> instruction_iterator . EOF
    (2) instruction_iterator -> instruction_iterator . instruction NEWLINE
    (4) instruction -> . CREATE_KEYWORD type VARNAME_ARGNAME construction_arguments
    (5) instruction -> . PLACE_KEYWORD type construction_arguments ON_KEYWORD VARNAME_ARGNAME coordinates
    (6) instruction -> . PLACE_KEYWORD type VARNAME_ARGNAME construction_arguments ON_KEYWORD VARNAME_ARGNAME coordinates
    (7) instruction -> . PLACE_KEYWORD VARNAME_ARGNAME ON_KEYWORD VARNAME_ARGNAME coordinates
    (8) instruction -> . RENDER_KEYWORD VARNAME_ARGNAME optional_render_string optional_coordinates
    (9) instruction -> . FOR_KEYWORD VARNAME_ARGNAME coordinates NEWLINE instruction_iterator ENDFOR_KEYWORD

    EOF             shift and go to state 4
    CREATE_KEYWORD  shift and go to state 6
    PLACE_KEYWORD   shift and go to state 7
    RENDER_KEYWORD  shift and go to state 8
    FOR_KEYWORD     shift and go to state 9

    instruction                    shift and go to state 5

state 3

    (3) instruction_iterator -> empty .

    EOF             reduce using rule 3 (instruction_iterator -> empty .)
    CREATE_KEYWORD  reduce using rule 3 (instruction_iterator -> empty .)
    PLACE_KEYWORD   reduce using rule 3 (instruction_iterator -> empty .)
    RENDER_KEYWORD  reduce using rule 3 (instruction_iterator -> empty .)
    FOR_KEYWORD     reduce using rule 3 (instruction_iterator -> empty .)
    ENDFOR_KEYWORD  reduce using rule 3 (instruction_iterator -> empty .)


state 4

    (1) start -> instruction_iterator EOF .

    $end            reduce using rule 1 (start -> instruction_iterator EOF .)


state 5

    (2) instruction_iterator -> instruction_iterator instruction . NEWLINE

    NEWLINE         shift and go to state 10


state 6

    (4) instruction -> CREATE_KEYWORD . type VARNAME_ARGNAME construction_arguments
    (14) type -> . MAP_KEYWORD
    (15) type -> . TERRAIN_KEYWORD
    (16) type -> . CITY_KEYWORD
    (17) type -> . ROAD_KEYWORD
    (18) type -> . RIVER_KEYWORD

    MAP_KEYWORD     shift and go to state 12
    TERRAIN_KEYWORD shift and go to state 13
    CITY_KEYWORD    shift and go to state 14
    ROAD_KEYWORD    shift and go to state 15
    RIVER_KEYWORD   shift and go to state 16

    type                           shift and go to state 11

state 7

    (5) instruction -> PLACE_KEYWORD . type construction_arguments ON_KEYWORD VARNAME_ARGNAME coordinates
    (6) instruction -> PLACE_KEYWORD . type VARNAME_ARGNAME construction_arguments ON_KEYWORD VARNAME_ARGNAME coordinates
    (7) instruction -> PLACE_KEYWORD . VARNAME_ARGNAME ON_KEYWORD VARNAME_ARGNAME coordinates
    (14) type -> . MAP_KEYWORD
    (15) type -> . TERRAIN_KEYWORD
    (16) type -> . CITY_KEYWORD
    (17) type -> . ROAD_KEYWORD
    (18) type -> . RIVER_KEYWORD

    VARNAME_ARGNAME shift and go to state 18
    MAP_KEYWORD     shift and go to state 12
    TERRAIN_KEYWORD shift and go to state 13
    CITY_KEYWORD    shift and go to state 14
    ROAD_KEYWORD    shift and go to state 15
    RIVER_KEYWORD   shift and go to state 16

    type                           shift and go to state 17

state 8

    (8) instruction -> RENDER_KEYWORD . VARNAME_ARGNAME optional_render_string optional_coordinates

    VARNAME_ARGNAME shift and go to state 19


state 9

    (9) instruction -> FOR_KEYWORD . VARNAME_ARGNAME coordinates NEWLINE instruction_iterator ENDFOR_KEYWORD

    VARNAME_ARGNAME shift and go to state 20


state 10

    (2) instruction_iterator -> instruction_iterator instruction NEWLINE .

    EOF             reduce using rule 2 (instruction_iterator -> instruction_iterator instruction NEWLINE .)
    CREATE_KEYWORD  reduce using rule 2 (instruction_iterator -> instruction_iterator instruction NEWLINE .)
    PLACE_KEYWORD   reduce using rule 2 (instruction_iterator -> instruction_iterator instruction NEWLINE .)
    RENDER_KEYWORD  reduce using rule 2 (instruction_iterator -> instruction_iterator instruction NEWLINE .)
    FOR_KEYWORD     reduce using rule 2 (instruction_iterator -> instruction_iterator instruction NEWLINE .)
    ENDFOR_KEYWORD  reduce using rule 2 (instruction_iterator -> instruction_iterator instruction NEWLINE .)


state 11

    (4) instruction -> CREATE_KEYWORD type . VARNAME_ARGNAME construction_arguments

    VARNAME_ARGNAME shift and go to state 21


state 12

    (14) type -> MAP_KEYWORD .

    VARNAME_ARGNAME reduce using rule 14 (type -> MAP_KEYWORD .)
    LPAREN          reduce using rule 14 (type -> MAP_KEYWORD .)


state 13

    (15) type -> TERRAIN_KEYWORD .

    VARNAME_ARGNAME reduce using rule 15 (type -> TERRAIN_KEYWORD .)
    LPAREN          reduce using rule 15 (type -> TERRAIN_KEYWORD .)


state 14

    (16) type -> CITY_KEYWORD .

    VARNAME_ARGNAME reduce using rule 16 (type -> CITY_KEYWORD .)
    LPAREN          reduce using rule 16 (type -> CITY_KEYWORD .)


state 15

    (17) type -> ROAD_KEYWORD .

    VARNAME_ARGNAME reduce using rule 17 (type -> ROAD_KEYWORD .)
    LPAREN          reduce using rule 17 (type -> ROAD_KEYWORD .)


state 16

    (18) type -> RIVER_KEYWORD .

    VARNAME_ARGNAME reduce using rule 18 (type -> RIVER_KEYWORD .)
    LPAREN          reduce using rule 18 (type -> RIVER_KEYWORD .)


state 17

    (5) instruction -> PLACE_KEYWORD type . construction_arguments ON_KEYWORD VARNAME_ARGNAME coordinates
    (6) instruction -> PLACE_KEYWORD type . VARNAME_ARGNAME construction_arguments ON_KEYWORD VARNAME_ARGNAME coordinates
    (19) construction_arguments -> . LPAREN argument_iterator RPAREN

    VARNAME_ARGNAME shift and go to state 23
    LPAREN          shift and go to state 24

    construction_arguments         shift and go to state 22

state 18

    (7) instruction -> PLACE_KEYWORD VARNAME_ARGNAME . ON_KEYWORD VARNAME_ARGNAME coordinates

    ON_KEYWORD      shift and go to state 25


state 19

    (8) instruction -> RENDER_KEYWORD VARNAME_ARGNAME . optional_render_string optional_coordinates
    (10) optional_render_string -> . AS_KEYWORD STRING
    (11) optional_render_string -> . empty
    (34) empty -> .

    AS_KEYWORD      shift and go to state 27
    LPAREN          reduce using rule 34 (empty -> .)
    NEWLINE         reduce using rule 34 (empty -> .)

    optional_render_string         shift and go to state 26
    empty                          shift and go to state 28

state 20

    (9) instruction -> FOR_KEYWORD VARNAME_ARGNAME . coordinates NEWLINE instruction_iterator ENDFOR_KEYWORD
    (33) coordinates -> . LPAREN value COMMA value RPAREN

    LPAREN          shift and go to state 30

    coordinates                    shift and go to state 29

state 21

    (4) instruction -> CREATE_KEYWORD type VARNAME_ARGNAME . construction_arguments
    (19) construction_arguments -> . LPAREN argument_iterator RPAREN

    LPAREN          shift and go to state 24

    construction_arguments         shift and go to state 31

state 22

    (5) instruction -> PLACE_KEYWORD type construction_arguments . ON_KEYWORD VARNAME_ARGNAME coordinates

    ON_KEYWORD      shift and go to state 32


state 23

    (6) instruction -> PLACE_KEYWORD type VARNAME_ARGNAME . construction_arguments ON_KEYWORD VARNAME_ARGNAME coordinates
    (19) construction_arguments -> . LPAREN argument_iterator RPAREN

    LPAREN          shift and go to state 24

    construction_arguments         shift and go to state 33

state 24

    (19) construction_arguments -> LPAREN . argument_iterator RPAREN
    (20) argument_iterator -> . argument
    (21) argument_iterator -> . argument_iterator COMMA argument
    (22) argument_iterator -> . empty
    (23) argument -> . VARNAME_ARGNAME COLON value
    (34) empty -> .

    VARNAME_ARGNAME shift and go to state 37
    RPAREN          reduce using rule 34 (empty -> .)
    COMMA           reduce using rule 34 (empty -> .)

    argument_iterator              shift and go to state 34
    argument                       shift and go to state 35
    empty                          shift and go to state 36

state 25

    (7) instruction -> PLACE_KEYWORD VARNAME_ARGNAME ON_KEYWORD . VARNAME_ARGNAME coordinates

    VARNAME_ARGNAME shift and go to state 38


state 26

    (8) instruction -> RENDER_KEYWORD VARNAME_ARGNAME optional_render_string . optional_coordinates
    (12) optional_coordinates -> . coordinates
    (13) optional_coordinates -> . empty
    (33) coordinates -> . LPAREN value COMMA value RPAREN
    (34) empty -> .

    LPAREN          shift and go to state 30
    NEWLINE         reduce using rule 34 (empty -> .)

    optional_coordinates           shift and go to state 39
    coordinates                    shift and go to state 40
    empty                          shift and go to state 41

state 27

    (10) optional_render_string -> AS_KEYWORD . STRING

    STRING          shift and go to state 42


state 28

    (11) optional_render_string -> empty .

    LPAREN          reduce using rule 11 (optional_render_string -> empty .)
    NEWLINE         reduce using rule 11 (optional_render_string -> empty .)


state 29

    (9) instruction -> FOR_KEYWORD VARNAME_ARGNAME coordinates . NEWLINE instruction_iterator ENDFOR_KEYWORD

    NEWLINE         shift and go to state 43


state 30

    (33) coordinates -> LPAREN . value COMMA value RPAREN
    (24) value -> . NUMBER
    (25) value -> . STRING
    (26) value -> . list
    (27) value -> . coordinates
    (28) value -> . VARNAME_ARGNAME
    (29) list -> . LSQUAREPAREN list_item_iterator RSQUAREPAREN
    (33) coordinates -> . LPAREN value COMMA value RPAREN

    NUMBER          shift and go to state 45
    STRING          shift and go to state 46
    VARNAME_ARGNAME shift and go to state 49
    LSQUAREPAREN    shift and go to state 50
    LPAREN          shift and go to state 30

    value                          shift and go to state 44
    list                           shift and go to state 47
    coordinates                    shift and go to state 48

state 31

    (4) instruction -> CREATE_KEYWORD type VARNAME_ARGNAME construction_arguments .

    NEWLINE         reduce using rule 4 (instruction -> CREATE_KEYWORD type VARNAME_ARGNAME construction_arguments .)


state 32

    (5) instruction -> PLACE_KEYWORD type construction_arguments ON_KEYWORD . VARNAME_ARGNAME coordinates

    VARNAME_ARGNAME shift and go to state 51


state 33

    (6) instruction -> PLACE_KEYWORD type VARNAME_ARGNAME construction_arguments . ON_KEYWORD VARNAME_ARGNAME coordinates

    ON_KEYWORD      shift and go to state 52


state 34

    (19) construction_arguments -> LPAREN argument_iterator . RPAREN
    (21) argument_iterator -> argument_iterator . COMMA argument

    RPAREN          shift and go to state 53
    COMMA           shift and go to state 54


state 35

    (20) argument_iterator -> argument .

    RPAREN          reduce using rule 20 (argument_iterator -> argument .)
    COMMA           reduce using rule 20 (argument_iterator -> argument .)


state 36

    (22) argument_iterator -> empty .

    RPAREN          reduce using rule 22 (argument_iterator -> empty .)
    COMMA           reduce using rule 22 (argument_iterator -> empty .)


state 37

    (23) argument -> VARNAME_ARGNAME . COLON value

    COLON           shift and go to state 55


state 38

    (7) instruction -> PLACE_KEYWORD VARNAME_ARGNAME ON_KEYWORD VARNAME_ARGNAME . coordinates
    (33) coordinates -> . LPAREN value COMMA value RPAREN

    LPAREN          shift and go to state 30

    coordinates                    shift and go to state 56

state 39

    (8) instruction -> RENDER_KEYWORD VARNAME_ARGNAME optional_render_string optional_coordinates .

    NEWLINE         reduce using rule 8 (instruction -> RENDER_KEYWORD VARNAME_ARGNAME optional_render_string optional_coordinates .)


state 40

    (12) optional_coordinates -> coordinates .

    NEWLINE         reduce using rule 12 (optional_coordinates -> coordinates .)


state 41

    (13) optional_coordinates -> empty .

    NEWLINE         reduce using rule 13 (optional_coordinates -> empty .)


state 42

    (10) optional_render_string -> AS_KEYWORD STRING .

    LPAREN          reduce using rule 10 (optional_render_string -> AS_KEYWORD STRING .)
    NEWLINE         reduce using rule 10 (optional_render_string -> AS_KEYWORD STRING .)


state 43

    (9) instruction -> FOR_KEYWORD VARNAME_ARGNAME coordinates NEWLINE . instruction_iterator ENDFOR_KEYWORD
    (2) instruction_iterator -> . instruction_iterator instruction NEWLINE
    (3) instruction_iterator -> . empty
    (34) empty -> .

    ENDFOR_KEYWORD  reduce using rule 34 (empty -> .)
    CREATE_KEYWORD  reduce using rule 34 (empty -> .)
    PLACE_KEYWORD   reduce using rule 34 (empty -> .)
    RENDER_KEYWORD  reduce using rule 34 (empty -> .)
    FOR_KEYWORD     reduce using rule 34 (empty -> .)

    instruction_iterator           shift and go to state 57
    empty                          shift and go to state 3

state 44

    (33) coordinates -> LPAREN value . COMMA value RPAREN

    COMMA           shift and go to state 58


state 45

    (24) value -> NUMBER .

    COMMA           reduce using rule 24 (value -> NUMBER .)
    RSQUAREPAREN    reduce using rule 24 (value -> NUMBER .)
    RPAREN          reduce using rule 24 (value -> NUMBER .)


state 46

    (25) value -> STRING .

    COMMA           reduce using rule 25 (value -> STRING .)
    RSQUAREPAREN    reduce using rule 25 (value -> STRING .)
    RPAREN          reduce using rule 25 (value -> STRING .)


state 47

    (26) value -> list .

    COMMA           reduce using rule 26 (value -> list .)
    RSQUAREPAREN    reduce using rule 26 (value -> list .)
    RPAREN          reduce using rule 26 (value -> list .)


state 48

    (27) value -> coordinates .

    COMMA           reduce using rule 27 (value -> coordinates .)
    RSQUAREPAREN    reduce using rule 27 (value -> coordinates .)
    RPAREN          reduce using rule 27 (value -> coordinates .)


state 49

    (28) value -> VARNAME_ARGNAME .

    COMMA           reduce using rule 28 (value -> VARNAME_ARGNAME .)
    RSQUAREPAREN    reduce using rule 28 (value -> VARNAME_ARGNAME .)
    RPAREN          reduce using rule 28 (value -> VARNAME_ARGNAME .)


state 50

    (29) list -> LSQUAREPAREN . list_item_iterator RSQUAREPAREN
    (30) list_item_iterator -> . value
    (31) list_item_iterator -> . list_item_iterator COMMA value
    (32) list_item_iterator -> . empty
    (24) value -> . NUMBER
    (25) value -> . STRING
    (26) value -> . list
    (27) value -> . coordinates
    (28) value -> . VARNAME_ARGNAME
    (34) empty -> .
    (29) list -> . LSQUAREPAREN list_item_iterator RSQUAREPAREN
    (33) coordinates -> . LPAREN value COMMA value RPAREN

    NUMBER          shift and go to state 45
    STRING          shift and go to state 46
    VARNAME_ARGNAME shift and go to state 49
    RSQUAREPAREN    reduce using rule 34 (empty -> .)
    COMMA           reduce using rule 34 (empty -> .)
    LSQUAREPAREN    shift and go to state 50
    LPAREN          shift and go to state 30

    list_item_iterator             shift and go to state 59
    value                          shift and go to state 60
    empty                          shift and go to state 61
    list                           shift and go to state 47
    coordinates                    shift and go to state 48

state 51

    (5) instruction -> PLACE_KEYWORD type construction_arguments ON_KEYWORD VARNAME_ARGNAME . coordinates
    (33) coordinates -> . LPAREN value COMMA value RPAREN

    LPAREN          shift and go to state 30

    coordinates                    shift and go to state 62

state 52

    (6) instruction -> PLACE_KEYWORD type VARNAME_ARGNAME construction_arguments ON_KEYWORD . VARNAME_ARGNAME coordinates

    VARNAME_ARGNAME shift and go to state 63


state 53

    (19) construction_arguments -> LPAREN argument_iterator RPAREN .

    ON_KEYWORD      reduce using rule 19 (construction_arguments -> LPAREN argument_iterator RPAREN .)
    NEWLINE         reduce using rule 19 (construction_arguments -> LPAREN argument_iterator RPAREN .)


state 54

    (21) argument_iterator -> argument_iterator COMMA . argument
    (23) argument -> . VARNAME_ARGNAME COLON value

    VARNAME_ARGNAME shift and go to state 37

    argument                       shift and go to state 64

state 55

    (23) argument -> VARNAME_ARGNAME COLON . value
    (24) value -> . NUMBER
    (25) value -> . STRING
    (26) value -> . list
    (27) value -> . coordinates
    (28) value -> . VARNAME_ARGNAME
    (29) list -> . LSQUAREPAREN list_item_iterator RSQUAREPAREN
    (33) coordinates -> . LPAREN value COMMA value RPAREN

    NUMBER          shift and go to state 45
    STRING          shift and go to state 46
    VARNAME_ARGNAME shift and go to state 49
    LSQUAREPAREN    shift and go to state 50
    LPAREN          shift and go to state 30

    value                          shift and go to state 65
    list                           shift and go to state 47
    coordinates                    shift and go to state 48

state 56

    (7) instruction -> PLACE_KEYWORD VARNAME_ARGNAME ON_KEYWORD VARNAME_ARGNAME coordinates .

    NEWLINE         reduce using rule 7 (instruction -> PLACE_KEYWORD VARNAME_ARGNAME ON_KEYWORD VARNAME_ARGNAME coordinates .)


state 57

    (9) instruction -> FOR_KEYWORD VARNAME_ARGNAME coordinates NEWLINE instruction_iterator . ENDFOR_KEYWORD
    (2) instruction_iterator -> instruction_iterator . instruction NEWLINE
    (4) instruction -> . CREATE_KEYWORD type VARNAME_ARGNAME construction_arguments
    (5) instruction -> . PLACE_KEYWORD type construction_arguments ON_KEYWORD VARNAME_ARGNAME coordinates
    (6) instruction -> . PLACE_KEYWORD type VARNAME_ARGNAME construction_arguments ON_KEYWORD VARNAME_ARGNAME coordinates
    (7) instruction -> . PLACE_KEYWORD VARNAME_ARGNAME ON_KEYWORD VARNAME_ARGNAME coordinates
    (8) instruction -> . RENDER_KEYWORD VARNAME_ARGNAME optional_render_string optional_coordinates
    (9) instruction -> . FOR_KEYWORD VARNAME_ARGNAME coordinates NEWLINE instruction_iterator ENDFOR_KEYWORD

    ENDFOR_KEYWORD  shift and go to state 66
    CREATE_KEYWORD  shift and go to state 6
    PLACE_KEYWORD   shift and go to state 7
    RENDER_KEYWORD  shift and go to state 8
    FOR_KEYWORD     shift and go to state 9

    instruction                    shift and go to state 5

state 58

    (33) coordinates -> LPAREN value COMMA . value RPAREN
    (24) value -> . NUMBER
    (25) value -> . STRING
    (26) value -> . list
    (27) value -> . coordinates
    (28) value -> . VARNAME_ARGNAME
    (29) list -> . LSQUAREPAREN list_item_iterator RSQUAREPAREN
    (33) coordinates -> . LPAREN value COMMA value RPAREN

    NUMBER          shift and go to state 45
    STRING          shift and go to state 46
    VARNAME_ARGNAME shift and go to state 49
    LSQUAREPAREN    shift and go to state 50
    LPAREN          shift and go to state 30

    value                          shift and go to state 67
    list                           shift and go to state 47
    coordinates                    shift and go to state 48

state 59

    (29) list -> LSQUAREPAREN list_item_iterator . RSQUAREPAREN
    (31) list_item_iterator -> list_item_iterator . COMMA value

    RSQUAREPAREN    shift and go to state 68
    COMMA           shift and go to state 69


state 60

    (30) list_item_iterator -> value .

    RSQUAREPAREN    reduce using rule 30 (list_item_iterator -> value .)
    COMMA           reduce using rule 30 (list_item_iterator -> value .)


state 61

    (32) list_item_iterator -> empty .

    RSQUAREPAREN    reduce using rule 32 (list_item_iterator -> empty .)
    COMMA           reduce using rule 32 (list_item_iterator -> empty .)


state 62

    (5) instruction -> PLACE_KEYWORD type construction_arguments ON_KEYWORD VARNAME_ARGNAME coordinates .

    NEWLINE         reduce using rule 5 (instruction -> PLACE_KEYWORD type construction_arguments ON_KEYWORD VARNAME_ARGNAME coordinates .)


state 63

    (6) instruction -> PLACE_KEYWORD type VARNAME_ARGNAME construction_arguments ON_KEYWORD VARNAME_ARGNAME . coordinates
    (33) coordinates -> . LPAREN value COMMA value RPAREN

    LPAREN          shift and go to state 30

    coordinates                    shift and go to state 70

state 64

    (21) argument_iterator -> argument_iterator COMMA argument .

    RPAREN          reduce using rule 21 (argument_iterator -> argument_iterator COMMA argument .)
    COMMA           reduce using rule 21 (argument_iterator -> argument_iterator COMMA argument .)


state 65

    (23) argument -> VARNAME_ARGNAME COLON value .

    RPAREN          reduce using rule 23 (argument -> VARNAME_ARGNAME COLON value .)
    COMMA           reduce using rule 23 (argument -> VARNAME_ARGNAME COLON value .)


state 66

    (9) instruction -> FOR_KEYWORD VARNAME_ARGNAME coordinates NEWLINE instruction_iterator ENDFOR_KEYWORD .

    NEWLINE         reduce using rule 9 (instruction -> FOR_KEYWORD VARNAME_ARGNAME coordinates NEWLINE instruction_iterator ENDFOR_KEYWORD .)


state 67

    (33) coordinates -> LPAREN value COMMA value . RPAREN

    RPAREN          shift and go to state 71


state 68

    (29) list -> LSQUAREPAREN list_item_iterator RSQUAREPAREN .

    COMMA           reduce using rule 29 (list -> LSQUAREPAREN list_item_iterator RSQUAREPAREN .)
    RSQUAREPAREN    reduce using rule 29 (list -> LSQUAREPAREN list_item_iterator RSQUAREPAREN .)
    RPAREN          reduce using rule 29 (list -> LSQUAREPAREN list_item_iterator RSQUAREPAREN .)


state 69

    (31) list_item_iterator -> list_item_iterator COMMA . value
    (24) value -> . NUMBER
    (25) value -> . STRING
    (26) value -> . list
    (27) value -> . coordinates
    (28) value -> . VARNAME_ARGNAME
    (29) list -> . LSQUAREPAREN list_item_iterator RSQUAREPAREN
    (33) coordinates -> . LPAREN value COMMA value RPAREN

    NUMBER          shift and go to state 45
    STRING          shift and go to state 46
    VARNAME_ARGNAME shift and go to state 49
    LSQUAREPAREN    shift and go to state 50
    LPAREN          shift and go to state 30

    value                          shift and go to state 72
    list                           shift and go to state 47
    coordinates                    shift and go to state 48

state 70

    (6) instruction -> PLACE_KEYWORD type VARNAME_ARGNAME construction_arguments ON_KEYWORD VARNAME_ARGNAME coordinates .

    NEWLINE         reduce using rule 6 (instruction -> PLACE_KEYWORD type VARNAME_ARGNAME construction_arguments ON_KEYWORD VARNAME_ARGNAME coordinates .)


state 71

    (33) coordinates -> LPAREN value COMMA value RPAREN .

    NEWLINE         reduce using rule 33 (coordinates -> LPAREN value COMMA value RPAREN .)
    COMMA           reduce using rule 33 (coordinates -> LPAREN value COMMA value RPAREN .)
    RSQUAREPAREN    reduce using rule 33 (coordinates -> LPAREN value COMMA value RPAREN .)
    RPAREN          reduce using rule 33 (coordinates -> LPAREN value COMMA value RPAREN .)


state 72

    (31) list_item_iterator -> list_item_iterator COMMA value .

    RSQUAREPAREN    reduce using rule 31 (list_item_iterator -> list_item_iterator COMMA value .)
    COMMA           reduce using rule 31 (list_item_iterator -> list_item_iterator COMMA value .)

