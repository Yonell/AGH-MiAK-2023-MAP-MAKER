
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AS_KEYWORD CITY_KEYWORD COLON COMMA CREATE_KEYWORD EOF LPAREN LSQUAREPAREN MAP_KEYWORD NEWLINE NUMBER ON_KEYWORD PLACE_KEYWORD RENDER_KEYWORD RIVER_KEYWORD ROAD_KEYWORD RPAREN RSQUAREPAREN STRING TERRAIN_KEYWORD VARNAME_ARGNAMEstart : instruction_iterator EOFinstruction_iterator : instruction_iterator instruction NEWLINEinstruction_iterator : emptyinstruction : CREATE_KEYWORD type VARNAME_ARGNAME construction_argumentsinstruction : PLACE_KEYWORD type construction_arguments ON_KEYWORD VARNAME_ARGNAME coordinatesinstruction : PLACE_KEYWORD type VARNAME_ARGNAME construction_arguments ON_KEYWORD VARNAME_ARGNAME coordinatesinstruction : PLACE_KEYWORD VARNAME_ARGNAME ON_KEYWORD VARNAME_ARGNAME coordinatesinstruction : RENDER_KEYWORD VARNAME_ARGNAME optional_render_string optional_coordinatesoptional_render_string : AS_KEYWORD STRING\n                              | emptyoptional_coordinates : coordinates\n                            | emptytype : MAP_KEYWORD\n            | TERRAIN_KEYWORD\n            | CITY_KEYWORD\n            | ROAD_KEYWORD\n            | RIVER_KEYWORDconstruction_arguments : LPAREN argument_iterator RPARENargument_iterator : argument\n                         | argument_iterator COMMA argument\n                         | emptyargument : VARNAME_ARGNAME COLON valuevalue : NUMBER\n             | STRING\n             | list\n             | coordinatesvalue : VARNAME_ARGNAMElist : LSQUAREPAREN list_item_iterator RSQUAREPARENlist_item_iterator : value\n                          | list_item_iterator COMMA value\n                          | emptycoordinates : LPAREN NUMBER COMMA NUMBER RPARENempty :'
    
_lr_action_items = {'EOF':([0,2,3,9,],[-33,4,-3,-2,]),'CREATE_KEYWORD':([0,2,3,9,],[-33,6,-3,-2,]),'PLACE_KEYWORD':([0,2,3,9,],[-33,7,-3,-2,]),'RENDER_KEYWORD':([0,2,3,9,],[-33,8,-3,-2,]),'$end':([1,4,],[0,-1,]),'NEWLINE':([5,18,24,26,27,35,36,37,39,42,45,47,58,65,],[9,-33,-33,-10,-4,-8,-11,-12,-9,-18,-7,-5,-6,-32,]),'MAP_KEYWORD':([6,7,],[11,11,]),'TERRAIN_KEYWORD':([6,7,],[12,12,]),'CITY_KEYWORD':([6,7,],[13,13,]),'ROAD_KEYWORD':([6,7,],[14,14,]),'RIVER_KEYWORD':([6,7,],[15,15,]),'VARNAME_ARGNAME':([7,8,10,11,12,13,14,15,16,22,23,28,41,43,44,56,64,],[17,18,19,-13,-14,-15,-16,-17,21,33,34,40,48,33,50,50,50,]),'LPAREN':([11,12,13,14,15,16,18,19,21,24,26,34,39,40,44,48,56,64,],[-13,-14,-15,-16,-17,22,-33,22,22,38,-10,38,-9,38,38,38,38,38,]),'ON_KEYWORD':([17,20,29,42,],[23,28,41,-18,]),'AS_KEYWORD':([18,],[25,]),'RPAREN':([22,30,31,32,49,50,51,52,53,54,55,62,63,65,],[-33,42,-19,-21,-20,-27,-22,-23,-24,-25,-26,65,-28,-32,]),'COMMA':([22,30,31,32,46,49,50,51,52,53,54,55,56,59,60,61,63,65,66,],[-33,43,-19,-21,57,-20,-27,-22,-23,-24,-25,-26,-33,64,-29,-31,-28,-32,-30,]),'STRING':([25,44,56,64,],[39,53,53,53,]),'COLON':([33,],[44,]),'NUMBER':([38,44,56,57,64,],[46,52,52,62,52,]),'LSQUAREPAREN':([44,56,64,],[56,56,56,]),'RSQUAREPAREN':([50,52,53,54,55,56,59,60,61,63,65,66,],[-27,-23,-24,-25,-26,-33,63,-29,-31,-28,-32,-30,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'instruction_iterator':([0,],[2,]),'empty':([0,18,22,24,56,],[3,26,32,37,61,]),'instruction':([2,],[5,]),'type':([6,7,],[10,16,]),'construction_arguments':([16,19,21,],[20,27,29,]),'optional_render_string':([18,],[24,]),'argument_iterator':([22,],[30,]),'argument':([22,43,],[31,49,]),'optional_coordinates':([24,],[35,]),'coordinates':([24,34,40,44,48,56,64,],[36,45,47,55,58,55,55,]),'value':([44,56,64,],[51,60,66,]),'list':([44,56,64,],[54,54,54,]),'list_item_iterator':([56,],[59,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> instruction_iterator EOF','start',2,'p_start','treemakenew.py',108),
  ('instruction_iterator -> instruction_iterator instruction NEWLINE','instruction_iterator',3,'p_instruction_iterator','treemakenew.py',119),
  ('instruction_iterator -> empty','instruction_iterator',1,'p_instruction_iteratorend','treemakenew.py',125),
  ('instruction -> CREATE_KEYWORD type VARNAME_ARGNAME construction_arguments','instruction',4,'p_instruction_create','treemakenew.py',131),
  ('instruction -> PLACE_KEYWORD type construction_arguments ON_KEYWORD VARNAME_ARGNAME coordinates','instruction',6,'p_instruction_place_new_unnamed','treemakenew.py',141),
  ('instruction -> PLACE_KEYWORD type VARNAME_ARGNAME construction_arguments ON_KEYWORD VARNAME_ARGNAME coordinates','instruction',7,'p_instruction_place_new_named','treemakenew.py',152),
  ('instruction -> PLACE_KEYWORD VARNAME_ARGNAME ON_KEYWORD VARNAME_ARGNAME coordinates','instruction',5,'p_instruction_place_existing','treemakenew.py',164),
  ('instruction -> RENDER_KEYWORD VARNAME_ARGNAME optional_render_string optional_coordinates','instruction',4,'p_instruction_render','treemakenew.py',174),
  ('optional_render_string -> AS_KEYWORD STRING','optional_render_string',2,'p_optional_render_string','treemakenew.py',184),
  ('optional_render_string -> empty','optional_render_string',1,'p_optional_render_string','treemakenew.py',185),
  ('optional_coordinates -> coordinates','optional_coordinates',1,'p_optional_coordinates','treemakenew.py',194),
  ('optional_coordinates -> empty','optional_coordinates',1,'p_optional_coordinates','treemakenew.py',195),
  ('type -> MAP_KEYWORD','type',1,'p_type','treemakenew.py',204),
  ('type -> TERRAIN_KEYWORD','type',1,'p_type','treemakenew.py',205),
  ('type -> CITY_KEYWORD','type',1,'p_type','treemakenew.py',206),
  ('type -> ROAD_KEYWORD','type',1,'p_type','treemakenew.py',207),
  ('type -> RIVER_KEYWORD','type',1,'p_type','treemakenew.py',208),
  ('construction_arguments -> LPAREN argument_iterator RPAREN','construction_arguments',3,'p_construction_arguments','treemakenew.py',214),
  ('argument_iterator -> argument','argument_iterator',1,'p_argument_iterator','treemakenew.py',220),
  ('argument_iterator -> argument_iterator COMMA argument','argument_iterator',3,'p_argument_iterator','treemakenew.py',221),
  ('argument_iterator -> empty','argument_iterator',1,'p_argument_iterator','treemakenew.py',222),
  ('argument -> VARNAME_ARGNAME COLON value','argument',3,'p_argument','treemakenew.py',236),
  ('value -> NUMBER','value',1,'p_value','treemakenew.py',242),
  ('value -> STRING','value',1,'p_value','treemakenew.py',243),
  ('value -> list','value',1,'p_value','treemakenew.py',244),
  ('value -> coordinates','value',1,'p_value','treemakenew.py',245),
  ('value -> VARNAME_ARGNAME','value',1,'p_value_VARNAME','treemakenew.py',249),
  ('list -> LSQUAREPAREN list_item_iterator RSQUAREPAREN','list',3,'p_list','treemakenew.py',255),
  ('list_item_iterator -> value','list_item_iterator',1,'p_list_item_iterator','treemakenew.py',261),
  ('list_item_iterator -> list_item_iterator COMMA value','list_item_iterator',3,'p_list_item_iterator','treemakenew.py',262),
  ('list_item_iterator -> empty','list_item_iterator',1,'p_list_item_iterator','treemakenew.py',263),
  ('coordinates -> LPAREN NUMBER COMMA NUMBER RPAREN','coordinates',5,'p_coordinates','treemakenew.py',275),
  ('empty -> <empty>','empty',0,'p_empty','treemakenew.py',281),
]
